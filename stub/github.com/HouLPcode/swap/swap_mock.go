// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/HouLPcode/swap/swap.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/HouLPcode/swap/swap_mock.go -package=swap -self_package=github.com/HouLPcode/swap --source=stub/github.com/HouLPcode/swap/swap.trpc.go
//

// Package swap is a generated GoMock package.
package swap

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockSwapServiceService is a mock of SwapServiceService interface.
type MockSwapServiceService struct {
	ctrl     *gomock.Controller
	recorder *MockSwapServiceServiceMockRecorder
}

// MockSwapServiceServiceMockRecorder is the mock recorder for MockSwapServiceService.
type MockSwapServiceServiceMockRecorder struct {
	mock *MockSwapServiceService
}

// NewMockSwapServiceService creates a new mock instance.
func NewMockSwapServiceService(ctrl *gomock.Controller) *MockSwapServiceService {
	mock := &MockSwapServiceService{ctrl: ctrl}
	mock.recorder = &MockSwapServiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwapServiceService) EXPECT() *MockSwapServiceServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSwapServiceService) ISGOMOCK() struct{} {
	return struct{}{}
}

// Swap mocks base method.
func (m *MockSwapServiceService) Swap(ctx context.Context, req *SwapRequest) (*SwapResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Swap", ctx, req)
	ret0, _ := ret[0].(*SwapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Swap indicates an expected call of Swap.
func (mr *MockSwapServiceServiceMockRecorder) Swap(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Swap", reflect.TypeOf((*MockSwapServiceService)(nil).Swap), ctx, req)
}

// MockSwapServiceClientProxy is a mock of SwapServiceClientProxy interface.
type MockSwapServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockSwapServiceClientProxyMockRecorder
}

// MockSwapServiceClientProxyMockRecorder is the mock recorder for MockSwapServiceClientProxy.
type MockSwapServiceClientProxyMockRecorder struct {
	mock *MockSwapServiceClientProxy
}

// NewMockSwapServiceClientProxy creates a new mock instance.
func NewMockSwapServiceClientProxy(ctrl *gomock.Controller) *MockSwapServiceClientProxy {
	mock := &MockSwapServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockSwapServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwapServiceClientProxy) EXPECT() *MockSwapServiceClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSwapServiceClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// Swap mocks base method.
func (m *MockSwapServiceClientProxy) Swap(ctx context.Context, req *SwapRequest, opts ...client.Option) (*SwapResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Swap", varargs...)
	ret0, _ := ret[0].(*SwapResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Swap indicates an expected call of Swap.
func (mr *MockSwapServiceClientProxyMockRecorder) Swap(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Swap", reflect.TypeOf((*MockSwapServiceClientProxy)(nil).Swap), varargs...)
}
